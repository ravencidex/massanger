import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, filedialog
from PIL import Image, ImageTk
import os
import json
import time
from datetime import datetime

class VKMessenger:
    def __init__(self, root):
        self.root = root
        self.root.title("VK –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä")
        self.root.geometry("1200x800")
        self.root.configure(bg='#EDEDED')
        self.root.minsize(1000, 600)
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_user = {
            'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            'status': 'online',
            'avatar': None,
            'friends': ['–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤'],
            'conversations': [
                {'name': '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', 'last_message': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', 'time': '12:30', 'unread': 3},
                {'name': '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤', 'last_message': '–ì–æ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º?', 'time': '11:45', 'unread': 0},
                {'name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', 'last_message': '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã', 'time': '10:20', 'unread': 1},
                {'name': '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', 'last_message': '–°–∫–∏–Ω—å —Ñ–æ—Ç–æ —Å –≤–µ—á–µ—Ä–∏–Ω–∫–∏', 'time': '09:15', 'unread': 0}
            ]
        }
        
        self.dark_mode = False
        self.current_chat = None
        self.messages = {
            '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞': [
                {'text': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', 'sender': 'other', 'time': '12:30'},
                {'text': '–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º', 'sender': 'me', 'time': '12:31'},
                {'text': '–ö—Ä—É—Ç–æ! –ê —á—Ç–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç?', 'sender': 'other', 'time': '12:32'}
            ],
            '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤': [
                {'text': '–ì–æ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º?', 'sender': 'other', 'time': '11:45'},
                {'text': '–í–æ —Å–∫–æ–ª—å–∫–æ –∏ –≥–¥–µ?', 'sender': 'me', 'time': '11:46'}
            ],
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞': [
                {'text': '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É', 'sender': 'other', 'time': '10:20'},
                {'text': '–£–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ –ø–æ—á—Ç—É', 'sender': 'me', 'time': '10:22'}
            ],
            '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤': [
                {'text': '–°–∫–∏–Ω—å —Ñ–æ—Ç–æ —Å –≤—á–µ—Ä–∞—à–Ω–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏', 'sender': 'other', 'time': '09:15'},
                {'text': '–í–µ—á–µ—Ä–æ–º —Å–∫–∏–Ω—É, —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ', 'sender': 'me', 'time': '09:16'}
            ]
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = tk.Frame(self.root, bg='#EDEDED')
        self.main_container.pack(fill='both', expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–∫–∞–∫ –≤ VK)
        self.create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.content_frame = tk.Frame(self.main_container, bg='#EDEDED')
        self.content_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —á–∞—Ç–∞–º–∏
        self.sidebar_frame = tk.Frame(self.content_frame, bg='#FFFFFF', width=300)
        self.sidebar_frame.pack(side='left', fill='y', padx=(0, 10))
        self.sidebar_frame.pack_propagate(False)
        
        # –ü–æ–∏—Å–∫
        self.create_search()
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        self.create_chats_list()
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_frame = tk.Frame(self.content_frame, bg='#FFFFFF')
        self.chat_frame.pack(side='right', fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        self.chat_header = tk.Frame(self.chat_frame, bg='#FFFFFF', height=60)
        self.chat_header.pack(fill='x')
        self.chat_header.pack_propagate(False)
        
        # –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_frame = tk.Frame(self.chat_frame, bg='#E5E5E5')
        self.messages_frame.pack(fill='both', expand=True)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.create_input_area()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.show_welcome_screen()
        
    def create_header(self):
        header = tk.Frame(self.main_container, bg='#4680C2', height=50)
        header.pack(fill='x')
        header.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø VK
        logo_frame = tk.Frame(header, bg='#4680C2')
        logo_frame.pack(side='left', padx=20)
        
        tk.Label(logo_frame, text="VK", font=("Arial", 20, "bold"), 
                bg='#4680C2', fg='white').pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_frame = tk.Frame(header, bg='#4680C2')
        nav_frame.pack(side='left', padx=30)
        
        nav_items = [
            ("–ú–æ—è –°—Ç—Ä–∞–Ω–∏—Ü–∞", self.show_profile),
            ("–î—Ä—É–∑—å—è", self.show_friends),
            ("–°–æ–æ–±—â–µ–Ω–∏—è", self.show_messages),
            ("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", self.show_photos)
        ]
        
        for text, command in nav_items:
            btn = tk.Button(nav_frame, text=text, font=("Arial", 10),
                          bg='#4680C2', fg='white', relief='flat',
                          command=command)
            btn.pack(side='left', padx=10)
            btn.bind("<Enter>", lambda e, b=btn: b.config(bg='#5A8DC8'))
            btn.bind("<Leave>", lambda e, b=btn: b.config(bg='#4680C2'))
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å –∞–≤–∞—Ç–∞—Ä–æ–º
        right_frame = tk.Frame(header, bg='#4680C2')
        right_frame.pack(side='right', padx=20)
        
        tk.Button(right_frame, text="üîî", font=("Arial", 14),
                 bg='#4680C2', fg='white', relief='flat',
                 command=self.show_notifications).pack(side='left', padx=5)
        
        tk.Button(right_frame, text="‚öôÔ∏è", font=("Arial", 14),
                 bg='#4680C2', fg='white', relief='flat',
                 command=self.open_settings).pack(side='left', padx=5)
        
        self.avatar_btn = tk.Button(right_frame, text="üë§", font=("Arial", 14),
                                   bg='#4680C2', fg='white', relief='flat',
                                   command=self.show_profile_menu)
        self.avatar_btn.pack(side='left', padx=5)
        
    def create_search(self):
        search_frame = tk.Frame(self.sidebar_frame, bg='#F5F5F5', height=50)
        search_frame.pack(fill='x', pady=(0, 10))
        search_frame.pack_propagate(False)
        
        search_entry = tk.Entry(search_frame, font=("Arial", 11),
                              bg='#FFFFFF', relief='flat', bd=1)
        search_entry.pack(fill='both', expand=True, padx=10, pady=10)
        search_entry.insert(0, "–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π")
        search_entry.bind("<FocusIn>", lambda e: search_entry.delete(0, 'end') if search_entry.get() == "–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π" else None)
        search_entry.bind("<FocusOut>", lambda e: search_entry.insert(0, "–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π") if not search_entry.get() else None)
        
    def create_chats_list(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(self.sidebar_frame, text="–°–æ–æ–±—â–µ–Ω–∏—è", font=("Arial", 16, "bold"),
                bg='#FFFFFF', fg='#000000').pack(anchor='w', padx=20, pady=(20, 10))
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chats_container = tk.Frame(self.sidebar_frame, bg='#FFFFFF')
        chats_container.pack(fill='both', expand=True)
        
        canvas = tk.Canvas(chats_container, bg='#FFFFFF', highlightthickness=0)
        scrollbar = ttk.Scrollbar(chats_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#FFFFFF')
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã
        for i, chat in enumerate(self.current_user['conversations']):
            self.create_chat_item(scrollable_frame, chat, i)
    
    def create_chat_item(self, parent, chat, index):
        chat_frame = tk.Frame(parent, bg='#FFFFFF', cursor="hand2")
        chat_frame.pack(fill='x', pady=2)
        
        # –ê–≤–∞—Ç–∞—Ä
        avatar_frame = tk.Frame(chat_frame, bg='#FFFFFF')
        avatar_frame.pack(side='left', padx=15, pady=10)
        
        tk.Label(avatar_frame, text="üë§", font=("Arial", 16),
                bg='#FFFFFF').pack()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
        info_frame = tk.Frame(chat_frame, bg='#FFFFFF')
        info_frame.pack(side='left', fill='x', expand=True, padx=(0, 15))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∏–º—è –∏ –≤—Ä–µ–º—è
        top_frame = tk.Frame(info_frame, bg='#FFFFFF')
        top_frame.pack(fill='x')
        
        tk.Label(top_frame, text=chat['name'], font=("Arial", 12, "bold"),
                bg='#FFFFFF', fg='#000000').pack(side='left')
        
        tk.Label(top_frame, text=chat['time'], font=("Arial", 10),
                bg='#FFFFFF', fg='#666666').pack(side='right')
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        bottom_frame = tk.Frame(info_frame, bg='#FFFFFF')
        bottom_frame.pack(fill='x')
        
        message_text = chat['last_message'][:30] + "..." if len(chat['last_message']) > 30 else chat['last_message']
        tk.Label(bottom_frame, text=message_text, font=("Arial", 10),
                bg='#FFFFFF', fg='#666666').pack(side='left')
        
        if chat['unread'] > 0:
            unread_frame = tk.Frame(bottom_frame, bg='#FF3347', width=20, height=20)
            unread_frame.pack(side='right')
            unread_frame.pack_propagate(False)
            tk.Label(unread_frame, text=str(chat['unread']), font=("Arial", 9, "bold"),
                    bg='#FF3347', fg='white').pack(expand=True)
        
        # –ë–∏–Ω–¥–∏–º –∫–ª–∏–∫
        chat_frame.bind("<Button-1>", lambda e, c=chat: self.open_chat(c))
        for child in chat_frame.winfo_children():
            child.bind("<Button-1>", lambda e, c=chat: self.open_chat(c))
    
    def create_input_area(self):
        input_frame = tk.Frame(self.chat_frame, bg='#FFFFFF', height=60)
        input_frame.pack(fill='x', side='bottom')
        input_frame.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(input_frame, bg='#FFFFFF')
        actions_frame.pack(side='left', padx=10)
        
        actions = ["üìé", "üòä", "üé§", "üì∑"]
        for action in actions:
            btn = tk.Button(actions_frame, text=action, font=("Arial", 14),
                          bg='#FFFFFF', fg='#666666', relief='flat',
                          command=lambda a=action: self.handle_action(a))
            btn.pack(side='left', padx=2)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry = tk.Entry(input_frame, font=("Arial", 12),
                                     bg='#F5F5F5', relief='flat')
        self.message_entry.pack(side='left', fill='x', expand=True, padx=10, pady=10)
        self.message_entry.bind('<Return>', self.send_message)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_btn = tk.Button(input_frame, text="‚û§", font=("Arial", 14),
                            command=self.send_message, bg='#4680C2', fg='white',
                            relief='flat', width=3)
        send_btn.pack(side='right', padx=10, pady=10)
    
    def show_welcome_screen(self):
        # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        for widget in self.messages_frame.winfo_children():
            widget.destroy()
        
        welcome_frame = tk.Frame(self.messages_frame, bg='#E5E5E5')
        welcome_frame.pack(fill='both', expand=True)
        
        tk.Label(welcome_frame, text="üí¨", font=("Arial", 48),
                bg='#E5E5E5', fg='#666666').pack(pady=(100, 20))
        
        tk.Label(welcome_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è",
                font=("Arial", 16), bg='#E5E5E5', fg='#666666').pack()
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        for widget in self.chat_header.winfo_children():
            widget.destroy()
        
        tk.Label(self.chat_header, text="–°–æ–æ–±—â–µ–Ω–∏—è", font=("Arial", 16, "bold"),
                bg='#FFFFFF', fg='#000000').pack(pady=15)
    
    def open_chat(self, chat):
        self.current_chat = chat['name']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        for widget in self.chat_header.winfo_children():
            widget.destroy()
        
        header_frame = tk.Frame(self.chat_header, bg='#FFFFFF')
        header_frame.pack(fill='both', expand=True)
        
        # –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è
        left_frame = tk.Frame(header_frame, bg='#FFFFFF')
        left_frame.pack(side='left', padx=20)
        
        tk.Label(left_frame, text="üë§", font=("Arial", 16),
                bg='#FFFFFF').pack(side='left')
        
        tk.Label(left_frame, text=chat['name'], font=("Arial", 14, "bold"),
                bg='#FFFFFF', fg='#000000').pack(side='left', padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        right_frame = tk.Frame(header_frame, bg='#FFFFFF')
        right_frame.pack(side='right', padx=20)
        
        action_buttons = ["üìû", "üìπ", "‚ÑπÔ∏è"]
        for btn_text in action_buttons:
            btn = tk.Button(right_frame, text=btn_text, font=("Arial", 14),
                          bg='#FFFFFF', fg='#666666', relief='flat')
            btn.pack(side='left', padx=5)
        
        # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for widget in self.messages_frame.winfo_children():
            widget.destroy()
        
        self.show_messages(self.current_chat)
    
    def show_messages(self, chat_name):
        canvas = tk.Canvas(self.messages_frame, bg='#E5E5E5', highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.messages_frame, orient="vertical", command=canvas.yview)
        messages_container = tk.Frame(canvas, bg='#E5E5E5')
        
        messages_container.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=messages_container, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in self.messages.get(chat_name, []):
            self.add_message_to_chat(messages_container, msg)
    
    def add_message_to_chat(self, parent, message):
        message_frame = tk.Frame(parent, bg='#E5E5E5')
        message_frame.pack(fill='x', pady=2)
        
        if message['sender'] == 'me':
            bg_color = '#CCE4FF'
            align = 'right'
            margin = (50, 10)
        else:
            bg_color = '#FFFFFF'
            align = 'left'
            margin = (10, 50)
        
        msg_container = tk.Frame(message_frame, bg='#E5E5E5')
        msg_container.pack(side=align, padx=margin)
        
        msg_bubble = tk.Frame(msg_container, bg=bg_color, relief='raised', bd=1)
        msg_bubble.pack()
        
        tk.Label(msg_bubble, text=message['text'], font=("Arial", 11),
                bg=bg_color, fg='#000000', wraplength=300,
                justify='left').pack(padx=10, pady=5)
        
        time_label = tk.Label(msg_bubble, text=message['time'], font=("Arial", 8),
                             bg=bg_color, fg='#666666')
        time_label.pack(anchor='se', padx=5, pady=2)
    
    def send_message(self, event=None):
        if not self.current_chat:
            messagebox.showinfo("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        message_text = self.message_entry.get().strip()
        if message_text:
            current_time = datetime.now().strftime("%H:%M")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = {
                'text': message_text,
                'sender': 'me',
                'time': current_time
            }
            
            self.messages[self.current_chat].append(new_message)
            self.message_entry.delete(0, tk.END)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
            for widget in self.messages_frame.winfo_children():
                widget.destroy()
            
            self.show_messages(self.current_chat)
            
            # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç
            self.root.after(2000, self.send_auto_reply)
    
    def send_auto_reply(self):
        if self.current_chat:
            replies = {
                '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞': '–ö—Ä—É—Ç–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!',
                '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤': '–Ø —Ç–æ–∂–µ! –ñ–¥—É –Ω–µ –¥–æ–∂–¥—É—Å—å!',
                '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞': '–°–ø–∞—Å–∏–±–æ! –ü–æ–ª—É—á–∏–ª!',
                '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤': '–ü–æ–Ω—è–ª, –∂–¥—É!'
            }
            
            reply_text = replies.get(self.current_chat, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!')
            current_time = datetime.now().strftime("%H:%M")
            
            reply_message = {
                'text': reply_text,
                'sender': 'other',
                'time': current_time
            }
            
            self.messages[self.current_chat].append(reply_message)
            
            for widget in self.messages_frame.winfo_children():
                widget.destroy()
            
            self.show_messages(self.current_chat)
    
    def handle_action(self, action):
        if action == "üìé":
            self.attach_file()
        elif action == "üòä":
            self.show_emoji_menu()
        elif action == "üé§":
            self.voice_message()
        elif action == "üì∑":
            self.take_photo()
    
    def attach_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            filetypes=[("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"), ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.gif"),
                      ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf *.doc *.docx *.txt")]
        )
        if file_path:
            messagebox.showinfo("–§–∞–π–ª", f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")
    
    def show_emoji_menu(self):
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å —ç–º–æ–¥–∑–∏
        emoji_window = tk.Toplevel(self.root)
        emoji_window.title("–≠–º–æ–¥–∑–∏")
        emoji_window.geometry("300x200")
        emoji_window.resizable(False, False)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —ç–º–æ–¥–∑–∏
        emojis = ["üòÄ", "üòÇ", "üòç", "ü§î", "üòé", "üëç", "‚ù§Ô∏è", "üéâ", "üî•", "üôè"]
        
        emoji_frame = tk.Frame(emoji_window)
        emoji_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ —Å–µ—Ç–∫–µ
        for i, emoji in enumerate(emojis):
            btn = tk.Button(emoji_frame, text=emoji, font=("Arial", 16),
                          command=lambda e=emoji: self.insert_emoji(e, emoji_window))
            btn.grid(row=i//5, column=i%5, padx=5, pady=5)
    
    def insert_emoji(self, emoji, window):
        current_text = self.message_entry.get()
        self.message_entry.delete(0, tk.END)
        self.message_entry.insert(0, current_text + emoji)
        window.destroy()
    
    def voice_message(self):
        messagebox.showinfo("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    def take_photo(self):
        messagebox.showinfo("–§–æ—Ç–æ", "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–º–µ—Ä—ã...")
    
    def show_profile(self):
        messagebox.showinfo("–ú–æ—è –°—Ç—Ä–∞–Ω–∏—Ü–∞", "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    
    def show_friends(self):
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π
        friends_window = tk.Toplevel(self.root)
        friends_window.title("–î—Ä—É–∑—å—è")
        friends_window.geometry("400x500")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(friends_window, text="–ú–æ–∏ –¥—Ä—É–∑—å—è", font=("Arial", 16, "bold")).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        listbox = tk.Listbox(friends_window, font=("Arial", 12))
        listbox.pack(fill='both', expand=True, padx=10, pady=10)
        
        for friend in self.current_user['friends']:
            listbox.insert(tk.END, friend)
    
    def show_messages_page(self):
        # –£–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        pass
    
    def show_photos(self):
        messagebox.showinfo("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "–ú–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    
    def show_notifications(self):
        messagebox.showinfo("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
    
    def open_settings(self):
        settings_window = tk.Toplevel(self.root)
        sett
